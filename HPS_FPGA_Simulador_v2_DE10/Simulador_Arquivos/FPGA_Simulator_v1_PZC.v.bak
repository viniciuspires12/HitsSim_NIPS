module FPGA_Simulator_v1_PZC
#(
	parameter RAND_BITS_HITS = 7,
	parameter BUNCH_MEM = "bunch_train_mask.mif",
	parameter BUNCH_POS = 3564,
	parameter BUNCH_TRAIN_ACTIVE = 1,
	parameter RAND_BITS_ENG = 10,
	parameter ENG_OUT_BITS = 13,
	parameter SHAPER_OUT_BITS = ENG_OUT_BITS+16+1,
	//parameter PZC_OUT_BITS = SHAPER_OUT_BITS+16,
	parameter PZC_OUT_BITS = ENG_OUT_BITS+16,
	parameter MEM_ENG_SIZE = 2**10,
	parameter MEM_ENG0 = "A13_PART1.mif",
	parameter MEM_ENG1 = "A13_PART2.mif",
	parameter MEM_ENG2 = "A13_PART3.mif",
	parameter MEM_ENG0_THRESH = 1001,
	parameter MEM_ENG1_THRESH = 985,
	parameter PZC_M_FACTOR = 454
	
)
(
	input clk, rst,
	input [RAND_BITS_HITS-1:0] occupancy,
	input signed [ENG_OUT_BITS-1:0] offset,	
	output hits_out, bt_mask_out,
	output [ENG_OUT_BITS-1:0] energy_out, event_bt, event_all,
	//output signed [SHAPER_OUT_BITS-1:0] shaper_out,
	output signed [SHAPER_OUT_BITS-16-1-1:0] shaper_out, pedestal_out,
	output signed [PZC_OUT_BITS-1:0] pzc_out
);





Hits_Bunch_train
#(
	.RAND_BITS(RAND_BITS_HITS),
	.BUNCH_MEM(BUNCH_MEM),
	.BUNCH_POS(3564),
	.BUNCH_TRAIN_ACTIVE(BUNCH_TRAIN_ACTIVE)
) hb_train
(
	.clk(clk), 
	.rst(rst),
	.occupancy(occupancy),
	.hits_out(hits_out), 
	.hits_orig(hits_orig), 
	.bt_mask_out(bt_mask_out)
);

energy_collisions
#(
	.RAND_BITS(RAND_BITS_ENG),
	.ENG_OUT_BITS(ENG_OUT_BITS),
	.MEM_ENG_SIZE(MEM_ENG_SIZE),
	.MEM_ENG0(MEM_ENG0),
	.MEM_ENG1(MEM_ENG1),
	.MEM_ENG2(MEM_ENG2),
	.MEM_ENG0_THRESH(MEM_ENG0_THRESH),
	.MEM_ENG1_THRESH(MEM_ENG1_THRESH)
)ec
(
	.clk(clk), 
	.rst(rst),
	.energy_out(energy_out)
);


wire [SHAPER_OUT_BITS-1:0] shaper_out_aux;



shaper_fenics
#( 
	.BITS_IN(ENG_OUT_BITS),
	.G_ENTRADA(2**32),
	.G_SAIDA_LOG(10)
)sf
(
	.clock(clk), 
	.in(event_bt),
	.out(shaper_out_aux)
);

assign shaper_out = shaper_out_aux >>> 10;


assign event_bt = energy_out * hits_out;
assign event_all = energy_out * hits_orig;


//pzc_media_fixa
//#(
//	.NBITS_IN(SHAPER_OUT_BITS),          // Numero de bits de dados
//	.NBITS_OUT(PZC_OUT_BITS),          // Numero de bits de dados de saida
//	.M_FACTOR(PZC_M_FACTOR),         // Fator M do PZC
//	.K_CORR(2**4)				  // Quando vai corrigir a saida
//)pzc_mf
//(
//	.clk(clk), 
//	.rst(rst),
//	.in(shaper_out),
//	.io_out(pzc_out)
//);

//pzc_zeroing_offset
pzc_ped_track
#(
	//.NBITS_IN(SHAPER_OUT_BITS),          // Numero de bits de dados
	.NBITS_IN(ENG_OUT_BITS),          // Numero de bits de dados
	.NBITS_OUT(PZC_OUT_BITS),          // Numero de bits de dados de saida
	.M_FACTOR(PZC_M_FACTOR)//,         // Fator M do PZC
	//.K_CORR(2**4)				  // Quando vai corrigir a saida
)pzc_zero
(
	.clk(clk), 
	.rst(rst),
	.bt_mask_out(bt_mask_out),
	.in(shaper_out + offset),
	.pedestal(pedestal_out),
	.io_out(pzc_out)
);

endmodule